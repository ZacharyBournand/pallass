// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package queries

import (
	"context"
)

const getPost = `-- name: GetPost :one
select id, user_id, title, content, created_at, updated_at
from posts
where id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPosts = `-- name: GetUserPosts :many
select id, user_id, title, content, created_at, updated_at
from posts
where user_id = $1
`

func (q *Queries) GetUserPosts(ctx context.Context, userID int32) ([]Post, error) {
	rows, err := q.db.Query(ctx, getUserPosts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPost = `-- name: InsertPost :one
INSERT INTO posts (user_id, title, content)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertPostParams struct {
	UserID  int32
	Title   string
	Content string
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertPost, arg.UserID, arg.Title, arg.Content)
	var id int32
	err := row.Scan(&id)
	return id, err
}
