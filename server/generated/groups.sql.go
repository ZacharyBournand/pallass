// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groups.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, name, description, created_at
FROM groups
WHERE id = $1
`

type GetGroupByIDRow struct {
	ID          int32
	Name        string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) GetGroupByID(ctx context.Context, id int32) (GetGroupByIDRow, error) {
	row := q.db.QueryRow(ctx, getGroupByID, id)
	var i GetGroupByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const insertGroup = `-- name: InsertGroup :one
INSERT INTO groups (name, description, created_at, public, notifications)
VALUES ($1, $2, CURRENT_TIMESTAMP, $3, $4)
RETURNING id, uuid
`

type InsertGroupParams struct {
	Name          string
	Description   pgtype.Text
	Public        pgtype.Bool
	Notifications pgtype.Bool
}

type InsertGroupRow struct {
	ID   int32
	Uuid pgtype.UUID
}

func (q *Queries) InsertGroup(ctx context.Context, arg InsertGroupParams) (InsertGroupRow, error) {
	row := q.db.QueryRow(ctx, insertGroup,
		arg.Name,
		arg.Description,
		arg.Public,
		arg.Notifications,
	)
	var i InsertGroupRow
	err := row.Scan(&i.ID, &i.Uuid)
	return i, err
}

const insertGroupMember = `-- name: InsertGroupMember :one
INSERT INTO group_members (group_id, user_id, role, joined_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
RETURNING group_id
`

type InsertGroupMemberParams struct {
	GroupID int32
	UserID  int32
	Role    string
}

func (q *Queries) InsertGroupMember(ctx context.Context, arg InsertGroupMemberParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertGroupMember, arg.GroupID, arg.UserID, arg.Role)
	var group_id int32
	err := row.Scan(&group_id)
	return group_id, err
}
