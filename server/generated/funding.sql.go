// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: funding.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addFundingOpportunity = `-- name: AddFundingOpportunity :one
insert into funding_opportunities(title, description, target_amount, link, deadline_date)
values($1, $2, $3, $4, $5)
returning id, title, description, target_amount, link, created_on, deadline_date
`

type AddFundingOpportunityParams struct {
	Title        string
	Description  string
	TargetAmount pgtype.Numeric
	Link         pgtype.Text
	DeadlineDate pgtype.Date
}

func (q *Queries) AddFundingOpportunity(ctx context.Context, arg AddFundingOpportunityParams) (FundingOpportunity, error) {
	row := q.db.QueryRow(ctx, addFundingOpportunity,
		arg.Title,
		arg.Description,
		arg.TargetAmount,
		arg.Link,
		arg.DeadlineDate,
	)
	var i FundingOpportunity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.Link,
		&i.CreatedOn,
		&i.DeadlineDate,
	)
	return i, err
}

const getAllFundingOpportunities = `-- name: GetAllFundingOpportunities :many
select id, title, description, target_amount, link, created_on, deadline_date
from funding_opportunities
`

func (q *Queries) GetAllFundingOpportunities(ctx context.Context) ([]FundingOpportunity, error) {
	rows, err := q.db.Query(ctx, getAllFundingOpportunities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FundingOpportunity
	for rows.Next() {
		var i FundingOpportunity
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TargetAmount,
			&i.Link,
			&i.CreatedOn,
			&i.DeadlineDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
